{"version":3,"sources":["reducers/index.tsx","TodoContext.tsx","components/TodoInput/index.tsx","components/MainTitle/index.tsx","components/TodosListView/EditPanel.tsx","components/TodosListView/index.tsx","pages/Home.tsx","App.tsx","index.tsx"],"names":["INITIAL_STATE","todos","reducer","state","action","type","newSetTodos","newTodo","id","uuid","task","payload","checked","remnant","filter","v","todo","tasks","newTaskName","TodoContext","createContext","TodoContextProvider","children","useReducer","dispatch","Provider","value","useStyles","makeStyles","root","color","TodoInput","classes","useState","setTask","useContext","className","Grid","container","spacing","alignItems","item","TextField","label","variant","onChange","e","target","IconButton","aria-label","component","onClick","event","SendRounded","style","fontSize","MainTitle","margin","fontWeight","Transition","React","forwardRef","props","ref","Slide","direction","EditPanel","taskName","setTaskName","useEffect","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","Button","closePanel","theme","createStyles","width","maxWidth","height","backgroundColor","palette","background","paper","flexWrap","overflowY","WebkitOverflowScrolling","whenChecked","textDecoration","textDecorationColor","textDecorationThickness","TodosListView","currentTask","setCurrentTask","toggleEditPanel","setToggleEditPanel","handleCheckingTask","handleEdit","handleDelete","List","map","labelId","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","ListItemText","primary","ListItemSecondaryAction","Edit","Delete","fontFamily","position","padding","top","left","display","justifyContent","flexDirection","borderRadius","divider","Home","Divider","orientation","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb13ad7a.chunk.js","sourcesContent":["import { State, Actions, Todo } from \"../TodoContext\";\nimport { v4 as uuid } from \"uuid\";\n\nexport const INITIAL_STATE: State = {\n  todos: [],\n};\n\nexport const reducer = (state: State, action: Actions): State => {\n  let newState: State = {};\n\n  switch (action.type) {\n    case \"ADD_TODO\":\n      let newSetTodos: Array<Todo> = [];\n\n      if (state.todos) {\n        const newTodo: Todo = {\n          id: uuid(),\n          task: action.payload,\n          checked: false,\n        };\n        newSetTodos = [...state.todos, newTodo];\n      }\n\n      newState = { ...state, todos: newSetTodos };\n      return newState;\n\n    case \"CHECK_TODO\":\n      let remnant: Array<Todo> = [];\n\n      if (state.todos) {\n        remnant = state.todos.filter((v) => v.id !== action.payload.id);\n      }\n\n      action.payload.checked = !action.payload.checked;\n\n      newState = {\n        ...state,\n        todos: [...remnant, action.payload],\n      };\n\n      return newState;\n\n    case \"EDIT_TODO\":\n      let todo = action.payload.task;\n      let tasks: Array<Todo> = [];\n\n      if (state.todos) {\n        tasks = state.todos.filter((v) => v.id !== todo.id);\n      }\n\n      todo.task = action.payload.newTaskName;\n\n      newState = {\n        ...state,\n        todos: [...tasks, todo],\n      };\n\n      return newState;\n\n    case \"DELETE_TODO\":\n      let todos: Array<Todo> = [];\n\n      if (state.todos) {\n        todos = state.todos.filter((v) => v.id !== action.payload.id);\n      }\n\n      newState = {\n        ...state,\n        todos: [...todos],\n      };\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from \"react\";\n\nimport { reducer, INITIAL_STATE } from \"./reducers\";\n\ntype ContextProps = {\n  state: State;\n  dispatch: (actions: Actions) => void;\n};\n\nexport interface Todo {\n  id: string;\n  task: string;\n  checked: boolean;\n}\n\nexport interface State {\n  todos?: Array<Todo>;\n}\n\nexport interface Actions {\n  type: string;\n  payload: any;\n}\n\nexport const TodoContext = createContext<Partial<ContextProps>>({});\n\nconst TodoContextProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  return (\n    <TodoContext.Provider value={{ state, dispatch }}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n\nexport default TodoContextProvider;\n","import React, { useContext, useState } from \"react\";\nimport { TextField, Grid, IconButton } from \"@material-ui/core\";\nimport { SendRounded } from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { TodoContext } from \"../../TodoContext\";\n\nconst useStyles = makeStyles({\n  root: {\n    color: \"White\",\n  },\n});\n\nconst TodoInput: React.FC<{}> = () => {\n  const classes = useStyles();\n  const [task, setTask] = useState(\"\");\n  const { dispatch } = useContext(TodoContext);\n\n  const handleClick = (\n    event: React.MouseEvent<HTMLSpanElement, MouseEvent>\n  ) => {\n    if (dispatch) dispatch({ type: \"ADD_TODO\", payload: task });\n    setTask(\"\");\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1} alignItems=\"center\">\n        <Grid item>\n          <TextField\n            color=\"primary\"\n            label=\"Todo\"\n            variant=\"outlined\"\n            value={task}\n            onChange={(e) => setTask(e.target.value)}\n          />\n        </Grid>\n        <Grid item>\n          <IconButton\n            color=\"primary\"\n            aria-label=\"registre todo\"\n            component=\"span\"\n            onClick={handleClick}\n          >\n            <SendRounded style={{ fontSize: \"32px\" }} />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default TodoInput;\n","import React from \"react\";\n\nconst MainTitle: React.FC<{}> = () => {\n  return (\n    <p style={{ fontSize: \"3em\", margin: \"20px 0px\" }}>\n      <span style={{ fontWeight: \"bold\" }}>Todo</span>List\n    </p>\n  );\n};\n\nexport default MainTitle;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Slide,\n  TextField,\n} from \"@material-ui/core\";\nimport { TransitionProps } from \"@material-ui/core/transitions\";\n\nimport { Todo, TodoContext } from \"../../TodoContext\";\n\ninterface IEditPanel {\n  task: Todo;\n  open: boolean;\n  onClose: () => void;\n}\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst EditPanel: React.FC<IEditPanel> = (props: IEditPanel) => {\n  const [taskName, setTaskName] = useState(props.task.task);\n  const { dispatch } = useContext(TodoContext);\n\n  useEffect(() => {\n    setTaskName(props.task.task);\n  }, [props.task]);\n\n  const handleSave = (task: Todo, closePanel: () => void) => {\n    if (dispatch) {\n      dispatch({ type: \"EDIT_TODO\", payload: { task, newTaskName: taskName } });\n    }\n    closePanel();\n  };\n\n  const handleTaskNameChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setTaskName(e.target.value);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={props.open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={props.onClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n          {\"Edit this Task\"}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Task Name\"\n            value={taskName}\n            onChange={handleTaskNameChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              handleSave(props.task, props.onClose);\n            }}\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default EditPanel;\n","import React, { useState, useContext } from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  IconButton,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { Delete, Edit } from \"@material-ui/icons\";\n\nimport EditPanel from \"./EditPanel\";\nimport { TodoContext, Todo } from \"../../TodoContext\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      maxWidth: 360,\n      height: 250,\n      backgroundColor: theme.palette.background.paper,\n      flexWrap: \"wrap\",\n      overflowY: \"scroll\",\n      WebkitOverflowScrolling: \"touch\",\n    },\n    whenChecked: {\n      textDecoration: \"line-through\",\n      textDecorationColor: \"#8B8B8B\",\n      textDecorationThickness: \"2px\",\n      color: \"#8B8B8B\",\n    },\n  })\n);\n\nconst TodosListView: React.FC<{}> = () => {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(TodoContext);\n\n  const [currentTask, setCurrentTask] = useState<Todo>({\n    id: \"\",\n    task: \"\",\n    checked: false,\n  });\n  const [toggleEditPanel, setToggleEditPanel] = useState(false);\n\n  const handleCheckingTask = (value: Todo) => () => {\n    if (dispatch) {\n      dispatch({ type: \"CHECK_TODO\", payload: value });\n    }\n  };\n\n  const handleEdit = (value: Todo) => () => {\n    setCurrentTask(value);\n    setToggleEditPanel(true);\n  };\n\n  const handleDelete = (value: Todo) => () => {\n    if (dispatch) {\n      dispatch({ type: \"DELETE_TODO\", payload: value });\n    }\n  };\n\n  return (\n    <List className={classes.root}>\n      {state && state.todos ? (\n        state.todos.map((value) => {\n          const labelId = `checkbox-list-label-${value.id}`;\n\n          return (\n            <div>\n              {/*Edit Panel Opens when Edit Button is clicked*/}\n              <EditPanel\n                task={currentTask}\n                open={toggleEditPanel}\n                onClose={() => {\n                  setToggleEditPanel(false);\n                }}\n              />\n\n              {/* Actual List Items */}\n              <ListItem\n                key={value.id}\n                role={undefined}\n                dense\n                button\n                onClick={handleCheckingTask(value)}\n              >\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={value.checked}\n                    tabIndex={-1}\n                    disableRipple\n                    inputProps={{ \"aria-labelledby\": labelId }}\n                  />\n                </ListItemIcon>\n                <ListItemText\n                  className={value.checked ? classes.whenChecked : undefined}\n                  id={labelId}\n                  primary={value.task}\n                />\n                <ListItemSecondaryAction>\n                  <IconButton\n                    onClick={handleEdit(value)}\n                    edge=\"end\"\n                    aria-label=\"edit-task\"\n                  >\n                    <Edit />\n                  </IconButton>\n                  <IconButton\n                    onClick={handleDelete(value)}\n                    edge=\"end\"\n                    aria-label=\"delete-task\"\n                  >\n                    <Delete />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            </div>\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </List>\n  );\n};\n\nexport default TodosListView;\n","import React from \"react\";\nimport { Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport TodoContextProvider from \"../TodoContext\";\nimport TodoInput from \"../components/TodoInput\";\nimport MainTitle from \"../components/MainTitle\";\nimport TodosListView from \"../components/TodosListView\";\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"linear-gradient(45deg, #49008E 30%, #26004A 90%)\",\n    fontFamily: \"Fira Code\",\n    position: \"fixed\",\n    padding: 0,\n    margin: 0,\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    margin: \"30px 0px\",\n    height: \"600px\",\n    width: \"400px\",\n    background: \"white\",\n    borderRadius: 16,\n  },\n  divider: {\n    width: 350,\n    margin: 20,\n  },\n});\n\nconst Home: React.FC<{}> = () => {\n  const classes = useStyles();\n\n  return (\n    <TodoContextProvider>\n      <div className={classes.root}>\n        <div className={classes.container}>\n          <MainTitle />\n          <TodoInput />\n          <Divider\n            className={classes.divider}\n            variant=\"middle\"\n            orientation=\"horizontal\"\n          />\n          <TodosListView />\n        </div>\n      </div>\n    </TodoContextProvider>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nimport Home from \"./pages/Home\";\n\nconst App: React.FC<{}> = () => <Home />;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}